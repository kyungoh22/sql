/*CREATE TABLE IF NOT EXISTS Manufacturers (
  Code INTEGER,
  Name TEXT NOT NULL,
  PRIMARY KEY (Code)
);

CREATE TABLE IF NOT EXISTS Products (
  Code INTEGER,
  Name TEXT NOT NULL,
  Price INTEGER NOT NULL,
  Manufacturer INTEGER NOT NULL,
  PRIMARY KEY (Code)
);

INSERT INTO Manufacturers(Code,Name) VALUES(1,'Sony');
INSERT INTO Manufacturers(Code,Name) VALUES(2,'Creative Labs');
INSERT INTO Manufacturers(Code,Name) VALUES(3,'Hewlett-Packard');
INSERT INTO Manufacturers(Code,Name) VALUES(4,'Iomega');
INSERT INTO Manufacturers(Code,Name) VALUES(5,'Fujitsu');
INSERT INTO Manufacturers(Code,Name) VALUES(6,'Winchester');

INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(1,'Hard drive',240,5);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(2,'Memory',120,6);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(3,'ZIP drive',150,4);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(4,'Floppy disk',5,6);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(5,'Monitor',240,1);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(6,'DVD drive',180,2);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(7,'CD drive',90,2);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(8,'Printer',270,3);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(9,'Toner cartridge',66,3);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(10,'DVD burner',180,2);
*/

SELECT *
FROM manufacturers;

SELECT *
FROM products;

-- 1.1 Select the names of all the products in the store.

SELECT name
FROM products;

-- 1.2 Select the names and the prices of all the products in the store.

SELECT name, price
FROM products;

-- 1.3 Select the name of the products with a price less than or equal to $200.

SELECT name, price
FROM products
WHERE price < 200;

-- 1.4 Select all the products with a price between $60 and $120.

SELECT * 
FROM products
WHERE price BETWEEN 60 and 120;


-- 1.5 Select the name and price in cents (i.e., the price must be multiplied by 100).

SELECT name, price * 100 AS price_in_cents
FROM products;

-- 1.6 Compute the average price of all the products.

SELECT AVG(price)
FROM products;


-- 1.7 Compute the average price of all products with manufacturer code equal to 2.

SELECT AVG(price)
FROM products
WHERE manufacturer = 2;

-- 1.8 Compute the number of products with a price larger than or equal to $180.

SELECT COUNT(code)
FROM products
WHERE price >= 180;

-- 1.9 Select the name and price of all products with a price larger than or equal to $180, 
-- and sort first by price (in descending order), and then by name (in ascending order).

SELECT name, price
FROM products
WHERE price >= 180
ORDER BY price DESC, name ASC;


-- 1.10 Select all the data from the products, including all the data for each product's manufacturer.

SELECT *
FROM products AS p
LEFT JOIN manufacturers AS m
ON p.manufacturer = m.code;

-- 1.11 Select the product name, price, and manufacturer name of all the products.

SELECT p.name, p.price, m.name
FROM products AS p
LEFT JOIN manufacturers AS m
ON p.manufacturer = m.code;

-- 1.12 Select the average price of each manufacturer's products, showing only the manufacturer's code.

SELECT manufacturer, ROUND(AVG(price), 2)
FROM products
GROUP BY manufacturer
ORDER BY manufacturer;


-- 1.13 Select the average price of each manufacturer's products, showing the manufacturer's name.

SELECT m.name, AVG(p.price)
FROM products AS p
LEFT JOIN manufacturers AS m
ON m.code = p.manufacturer
GROUP BY m.name;

-- 1.14 Select the names of manufacturer whose products have an average price larger than or equal to $150.

SELECT m.name, AVG(p.price) AS avg_price
FROM products AS p
LEFT JOIN manufacturers AS m
ON p.manufacturer = m.code
GROUP BY m.name
HAVING AVG(p.price)>= 150;

-- 1.15 Select the name and price of the cheapest product.
SELECT name, price
FROM products
ORDER BY price
LIMIT 1;

-- 1.16 Select the name of each manufacturer along with 
-- the name and price of its most expensive product.

SELECT *
FROM manufacturers;

SELECT *
FROM products;

-- Method 1: Nested Query inside FROM
-- nested query inside FROM
SELECT m.code, m.name AS manufacturer, MAX (price) AS price
FROM manufacturers AS m
LEFT JOIN products AS p
ON p.manufacturer = m.code
GROUP BY m.code, m.name
ORDER BY m.code;

SELECT max_price.manufacturer, p.name, p.price
FROM (
    SELECT m.code, m.name AS manufacturer, MAX (price) AS price
    FROM manufacturers AS m
    LEFT JOIN products AS p
    ON p.manufacturer = m.code
    GROUP BY m.code, m.name
    ORDER BY m.code
    ) AS max_price
LEFT JOIN products AS p
ON max_price.code = p.manufacturer
WHERE max_price.price = p.price;

-- Method 2
-- Nested Query inside WHERE

SELECT MAX(p.price)
FROM manufacturers AS m
LEFT JOIN products AS p
ON m.code = p.manufacturer
GROUP BY p.manufacturer
ORDER BY p.manufacturer;

SELECT m.name, p.name, p.price
FROM products AS p
LEFT JOIN manufacturers AS m
ON p.manufacturer = m.code
WHERE price IN (
SELECT MAX(p.price)
FROM manufacturers AS m
LEFT JOIN products AS p
ON m.code = p.manufacturer
GROUP BY p.manufacturer
ORDER BY p.manufacturer
);

-- Method 3
-- Using View


DROP VIEW mp
CREATE VIEW mp AS 
SELECT m.name AS manufacturer, m.code, MAX(price) AS max_price
FROM products AS p
LEFT JOIN manufacturers AS m
ON p.manufacturer = m.code
GROUP BY m.name, m.code;

SELECT mp.manufacturer, p.name, max_price
FROM mp
LEFT JOIN products AS p
ON mp.code = p.manufacturer
WHERE max_price = p.price;


-- Method 4
-- Using CTE

WITH mp AS (
SELECT m.code, m.name, MAX(price) AS max_price
FROM manufacturers AS m
LEFT JOIN products AS p
ON m.code = p.manufacturer
GROUP BY m.code, m.name
ORDER BY m.code
)

SELECT mp.name AS manufacturer, p.name, price
FROM products AS p
LEFT JOIN mp
ON mp.code = p.manufacturer
WHERE price = mp.max_price;

-- 1.17 Add a new product: Loudspeakers, $70, manufacturer 2.

INSERT INTO products (code, name, price, manufacturer) VALUES (11, 'Loudspeakers', 70, 2);

-- 1.18 Update the name of product 8 to "Laser Printer".

UPDATE products
SET name = 'Laser Printer' 
WHERE code = 8;

-- 1.19 Apply a 10% discount to all products.

SELECT code, name, price * 0.9 AS discounted_price, manufacturer
FROM products;

-- 1.20 Apply a 10% discount to all products with a price larger than or equal to $120.

SELECT code, name, price *0.9 AS updated_price
FROM products
WHERE price >= 120;


SELECT * 
FROM products;

SELECT * 
FROM manufacturers;





































