/*
CREATE TABLE Physician (
EmployeeID INTEGER NOT NULL,
Name TEXT NOT NULL,
Position TEXT NOT NULL,
SSN INTEGER NOT NULL,
PRIMARY KEY (EmployeeID)
); 

CREATE TABLE Department (
DepartmentID INTEGER NOT NULL,
Name TEXT NOT NULL,
Head INTEGER NOT NULL,
PRIMARY KEY (DepartmentID)
);

CREATE TABLE Affiliated_With (
Physician INTEGER NOT NULL,
Department INTEGER NOT NULL,
PrimaryAffiliation BOOLEAN NOT NULL,
PRIMARY KEY(Physician, Department)
);

CREATE TABLE Procedures (
Code INTEGER NOT NULL,
Name TEXT NOT NULL,
Cost REAL NOT NULL,
PRIMARY KEY (Code)
);

CREATE TABLE Trained_In (
Physician INTEGER NOT NULL,
Treatment INTEGER NOT NULL,
CertificationDate timestamp NOT NULL,
CertificationExpires timestamp NOT NULL,
PRIMARY KEY(Physician, Treatment)
);

CREATE TABLE Patient (
SSN INTEGER NOT NULL,
Name TEXT NOT NULL,
Address TEXT NOT NULL,
Phone TEXT NOT NULL,
InsuranceID INTEGER NOT NULL,
PCP INTEGER NOT NULL,
PRIMARY KEY (SSN)
);

CREATE TABLE Nurse (
EmployeeID INTEGER NOT NULL,
Name TEXT NOT NULL,
Position TEXT NOT NULL,
Registered BOOLEAN NOT NULL,
SSN INTEGER NOT NULL,
PRIMARY KEY (EmployeeID)
);

CREATE TABLE Appointment (
AppointmentID INTEGER NOT NULL,
Patient INTEGER NOT NULL,
PrepNurse INTEGER,
Physician INTEGER NOT NULL,
Start1 timestamp NOT NULL,
End1 timestamp NOT NULL,
ExaminationRoom TEXT NOT NULL,
PRIMARY KEY (AppointmentID)
);

CREATE TABLE Medication (
Code INTEGER NOT NULL,
Name TEXT NOT NULL,
Brand TEXT NOT NULL,
Description TEXT NOT NULL,
PRIMARY KEY(Code)
);

CREATE TABLE Prescribes (
Physician INTEGER NOT NULL,
Patient INTEGER NOT NULL,
Medication INTEGER NOT NULL,
Date timestamp NOT NULL,
Appointment INTEGER,
Dose TEXT NOT NULL,
PRIMARY KEY(Physician, Patient, Medication, Date)
);

CREATE TABLE Block (
Floor INTEGER NOT NULL,
Code INTEGER NOT NULL,
PRIMARY KEY(Floor, Code)
); 

CREATE TABLE Room (
Number INTEGER NOT NULL,
Type TEXT NOT NULL,
BlockFloor INTEGER NOT NULL,
BlockCode INTEGER NOT NULL,
Unavailable BOOLEAN NOT NULL,
PRIMARY KEY(Number)
);

CREATE TABLE On_Call (
Nurse INTEGER NOT NULL,
BlockFloor INTEGER NOT NULL,
BlockCode INTEGER NOT NULL,
Start1 timestamp NOT NULL,
End1 timestamp NOT NULL,
PRIMARY KEY(Nurse, BlockFloor, BlockCode, Start1, End1)
);

CREATE TABLE Stay (
StayID INTEGER NOT NULL,
Patient INTEGER NOT NULL,
Room INTEGER NOT NULL,
Start1 timestamp NOT NULL,
End1 timestamp NOT NULL,
PRIMARY KEY(StayID)
);

CREATE TABLE Undergoes (
Patient INTEGER NOT NULL,
Procedure INTEGER NOT NULL,
Stay INTEGER NOT NULL,
Date timestamp NOT NULL,
Physician INTEGER NOT NULL,
AssistingNurse INTEGER,
PRIMARY KEY(Patient, Procedure, Stay, Date)
);


INSERT INTO Physician VALUES(1,'John Dorian','Staff Internist',111111111);
INSERT INTO Physician VALUES(2,'Elliot Reid','Attending Physician',222222222);
INSERT INTO Physician VALUES(3,'Christopher Turk','Surgical Attending Physician',333333333);
INSERT INTO Physician VALUES(4,'Percival Cox','Senior Attending Physician',444444444);
INSERT INTO Physician VALUES(5,'Bob Kelso','Head Chief of Medicine',555555555);
INSERT INTO Physician VALUES(6,'Todd Quinlan','Surgical Attending Physician',666666666);
INSERT INTO Physician VALUES(7,'John Wen','Surgical Attending Physician',777777777);
INSERT INTO Physician VALUES(8,'Keith Dudemeister','MD Resident',888888888);
INSERT INTO Physician VALUES(9,'Molly Clock','Attending Psychiatrist',999999999);

INSERT INTO Department VALUES(1,'General Medicine',4);
INSERT INTO Department VALUES(2,'Surgery',7);
INSERT INTO Department VALUES(3,'Psychiatry',9);

INSERT INTO Affiliated_With VALUES(1,1,true);
INSERT INTO Affiliated_With VALUES(2,1,true);
INSERT INTO Affiliated_With VALUES(3,1,false);
INSERT INTO Affiliated_With VALUES(3,2,true);
INSERT INTO Affiliated_With VALUES(4,1,true);
INSERT INTO Affiliated_With VALUES(5,1,true);
INSERT INTO Affiliated_With VALUES(6,2,true);
INSERT INTO Affiliated_With VALUES(7,1,false);
INSERT INTO Affiliated_With VALUES(7,2,true);
INSERT INTO Affiliated_With VALUES(8,1,true);
INSERT INTO Affiliated_With VALUES(9,3,true);

INSERT INTO Procedures VALUES(1,'Reverse Rhinopodoplasty',1500.0);
INSERT INTO Procedures VALUES(2,'Obtuse Pyloric Recombobulation',3750.0);
INSERT INTO Procedures VALUES(3,'Folded Demiophtalmectomy',4500.0);
INSERT INTO Procedures VALUES(4,'Complete Walletectomy',10000.0);
INSERT INTO Procedures VALUES(5,'Obfuscated Dermogastrotomy',4899.0);
INSERT INTO Procedures VALUES(6,'Reversible Pancreomyoplasty',5600.0);
INSERT INTO Procedures VALUES(7,'Follicular Demiectomy',25.0);

INSERT INTO Patient VALUES(100000001,'John Smith','42 Foobar Lane','555-0256',68476213,1);
INSERT INTO Patient VALUES(100000002,'Grace Ritchie','37 Snafu Drive','555-0512',36546321,2);
INSERT INTO Patient VALUES(100000003,'Random J. Patient','101 Omgbbq Street','555-1204',65465421,2);
INSERT INTO Patient VALUES(100000004,'Dennis Doe','1100 Foobaz Avenue','555-2048',68421879,3);

INSERT INTO Nurse VALUES(101,'Carla Espinosa','Head Nurse',true,111111110);
INSERT INTO Nurse VALUES(102,'Laverne Roberts','Nurse',true,222222220);
INSERT INTO Nurse VALUES(103,'Paul Flowers','Nurse',false,333333330);

INSERT INTO Appointment VALUES(13216584,100000001,101,1,'2008-04-24 10:00','2008-04-24 11:00','A');
INSERT INTO Appointment VALUES(26548913,100000002,101,2,'2008-04-24 10:00','2008-04-24 11:00','B');
INSERT INTO Appointment VALUES(36549879,100000001,102,1,'2008-04-25 10:00','2008-04-25 11:00','A');
INSERT INTO Appointment VALUES(46846589,100000004,103,4,'2008-04-25 10:00','2008-04-25 11:00','B');
INSERT INTO Appointment VALUES(59871321,100000004,NULL,4,'2008-04-26 10:00','2008-04-26 11:00','C');
INSERT INTO Appointment VALUES(69879231,100000003,103,2,'2008-04-26 11:00','2008-04-26 12:00','C');
INSERT INTO Appointment VALUES(76983231,100000001,NULL,3,'2008-04-26 12:00','2008-04-26 13:00','C');
INSERT INTO Appointment VALUES(86213939,100000004,102,9,'2008-04-27 10:00','2008-04-21 11:00','A');
INSERT INTO Appointment VALUES(93216548,100000002,101,2,'2008-04-27 10:00','2008-04-27 11:00','B');

INSERT INTO Medication VALUES(1,'Procrastin-X','X','N/A');
INSERT INTO Medication VALUES(2,'Thesisin','Foo Labs','N/A');
INSERT INTO Medication VALUES(3,'Awakin','Bar Laboratories','N/A');
INSERT INTO Medication VALUES(4,'Crescavitin','Baz Industries','N/A');
INSERT INTO Medication VALUES(5,'Melioraurin','Snafu Pharmaceuticals','N/A');

INSERT INTO Prescribes VALUES(1,100000001,1,'2008-04-24 10:47',13216584,'5');
INSERT INTO Prescribes VALUES(9,100000004,2,'2008-04-27 10:53',86213939,'10');
INSERT INTO Prescribes VALUES(9,100000004,2,'2008-04-30 16:53',NULL,'5');

INSERT INTO Block VALUES(1,1);
INSERT INTO Block VALUES(1,2);
INSERT INTO Block VALUES(1,3);
INSERT INTO Block VALUES(2,1);
INSERT INTO Block VALUES(2,2);
INSERT INTO Block VALUES(2,3);
INSERT INTO Block VALUES(3,1);
INSERT INTO Block VALUES(3,2);
INSERT INTO Block VALUES(3,3);
INSERT INTO Block VALUES(4,1);
INSERT INTO Block VALUES(4,2);
INSERT INTO Block VALUES(4,3);

INSERT INTO Room VALUES(101,'Single',1,1,false);
INSERT INTO Room VALUES(102,'Single',1,1,false);
INSERT INTO Room VALUES(103,'Single',1,1,false);
INSERT INTO Room VALUES(111,'Single',1,2,false);
INSERT INTO Room VALUES(112,'Single',1,2,true);
INSERT INTO Room VALUES(113,'Single',1,2,false);
INSERT INTO Room VALUES(121,'Single',1,3,false);
INSERT INTO Room VALUES(122,'Single',1,3,false);
INSERT INTO Room VALUES(123,'Single',1,3,false);
INSERT INTO Room VALUES(201,'Single',2,1,true);
INSERT INTO Room VALUES(202,'Single',2,1,false);
INSERT INTO Room VALUES(203,'Single',2,1,false);
INSERT INTO Room VALUES(211,'Single',2,2,false);
INSERT INTO Room VALUES(212,'Single',2,2,false);
INSERT INTO Room VALUES(213,'Single',2,2,true);
INSERT INTO Room VALUES(221,'Single',2,3,false);
INSERT INTO Room VALUES(222,'Single',2,3,false);
INSERT INTO Room VALUES(223,'Single',2,3,false);
INSERT INTO Room VALUES(301,'Single',3,1,false);
INSERT INTO Room VALUES(302,'Single',3,1,true);
INSERT INTO Room VALUES(303,'Single',3,1,false);
INSERT INTO Room VALUES(311,'Single',3,2,false);
INSERT INTO Room VALUES(312,'Single',3,2,false);
INSERT INTO Room VALUES(313,'Single',3,2,false);
INSERT INTO Room VALUES(321,'Single',3,3,true);
INSERT INTO Room VALUES(322,'Single',3,3,false);
INSERT INTO Room VALUES(323,'Single',3,3,false);
INSERT INTO Room VALUES(401,'Single',4,1,false);
INSERT INTO Room VALUES(402,'Single',4,1,true);
INSERT INTO Room VALUES(403,'Single',4,1,false);
INSERT INTO Room VALUES(411,'Single',4,2,false);
INSERT INTO Room VALUES(412,'Single',4,2,false);
INSERT INTO Room VALUES(413,'Single',4,2,false);
INSERT INTO Room VALUES(421,'Single',4,3,true);
INSERT INTO Room VALUES(422,'Single',4,3,false);
INSERT INTO Room VALUES(423,'Single',4,3,false);

INSERT INTO On_Call VALUES(101,1,1,'2008-11-04 11:00','2008-11-04 19:00');
INSERT INTO On_Call VALUES(101,1,2,'2008-11-04 11:00','2008-11-04 19:00');
INSERT INTO On_Call VALUES(102,1,3,'2008-11-04 11:00','2008-11-04 19:00');
INSERT INTO On_Call VALUES(103,1,1,'2008-11-04 19:00','2008-11-05 03:00');
INSERT INTO On_Call VALUES(103,1,2,'2008-11-04 19:00','2008-11-05 03:00');
INSERT INTO On_Call VALUES(103,1,3,'2008-11-04 19:00','2008-11-05 03:00');

INSERT INTO Stay VALUES(3215,100000001,111,'2008-05-01','2008-05-04');
INSERT INTO Stay VALUES(3216,100000003,123,'2008-05-03','2008-05-14');
INSERT INTO Stay VALUES(3217,100000004,112,'2008-05-02','2008-05-03');

INSERT INTO Undergoes VALUES(100000001,6,3215,'2008-05-02',3,101);
INSERT INTO Undergoes VALUES(100000001,2,3215,'2008-05-03',7,101);
INSERT INTO Undergoes VALUES(100000004,1,3217,'2008-05-07',3,102);
INSERT INTO Undergoes VALUES(100000004,5,3217,'2008-05-09',6,NULL);
INSERT INTO Undergoes VALUES(100000001,7,3217,'2008-05-10',7,101);
INSERT INTO Undergoes VALUES(100000004,4,3217,'2008-05-13',3,103);

INSERT INTO Trained_In VALUES(3,1,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(3,2,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(3,5,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(3,6,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(3,7,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(6,2,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(6,5,'2007-01-01','2007-12-31');
INSERT INTO Trained_In VALUES(6,6,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,1,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,2,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,3,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,4,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,5,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,6,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,7,'2008-01-01','2008-12-31');
*/


SELECT *
FROM Physician

SELECT *
FROM Department

SELECT *
FROM Affiliated_With

SELECT *
FROM Procedures

SELECT *
FROM Trained_In

SELECT *
FROM Patient

SELECT *
FROM Nurse

SELECT *
FROM Appointment

SELECT *
FROM Medication

SELECT *
FROM Prescribes

SELECT *
FROM Block

SELECT *
FROM Room

SELECT *
FROM On_Call

SELECT *
FROM Stay

SELECT *
FROM Undergoes

-- Questions
-- 8.1 Obtain the names of all physicians that have performed a 
-- medical procedure they have never been certified to perform.

SELECT u.physician, u.procedure, u.date
FROM Undergoes AS u;

SELECT *
FROM Trained_In AS ti;

DROP VIEW view1;
CREATE VIEW view1 AS
SELECT u.physician, u.procedure, u.date, ti.treatment AS trained_in, certificationdate, certificationexpires 
FROM Undergoes AS u
LEFT JOIN Trained_In AS ti
ON u.physician = ti.physician AND u.procedure = ti.treatment
ORDER BY physician, procedure;

-- This query returns data for all physicians who performed a procedure
-- for which they were not certified at the time. 
-- EITHER they have never been certified in the procedure, 
-- OR their certification was not valid at the time of the procedure. 

CREATE VIEW view2 AS
SELECT *
FROM view1
WHERE trained_in IS  NULL 
OR date < certificationdate 
OR date > certificationexpires;

-- Now, to actually answer question 1: 

SELECT view2.physician AS physician_id, p.name, view2.procedure, view2.trained_in, view2.certificationdate, view2.certificationexpires
FROM view2
LEFT JOIN Physician AS p
ON view2.physician = p.employeeid
WHERE trained_in IS NULL;



-- 8.2 Same as the previous query, but include the following information in the results: 
-- Physician name, name of procedure, date when the procedure was carried out, 
-- name of the patient the procedure was carried out on.


CREATE VIEW view3 AS
SELECT u.physician, phys.name AS physician_name, u.procedure, u.patient, u.date, ti.treatment AS trained_in, ti.certificationdate, ti.certificationexpires
FROM Undergoes AS u
LEFT JOIN Trained_In AS ti ON u.physician = ti.physician AND u.procedure = ti.treatment
LEFT JOIN Physician AS phys ON u.physician = phys.employeeid
ORDER BY u.physician, procedure;

CREATE VIEW view4 AS
SELECT view3.physician_name, view3.date, view3.procedure, view3.trained_in, view3.certificationdate, 
view3.certificationexpires, Patient.name AS patient_name, Procedures.name AS procedure_name
FROM view3
LEFT JOIN Patient ON view3.patient = Patient.ssn
LEFT JOIN Procedures ON view3.procedure = Procedures.code;

-- Now select from view4 only the rows where trained_in is NULL
SELECT physician_name, procedure_name, date, patient_name
FROM view4
WHERE trained_in IS NULL;


-- 8.3 Obtain the names of all physicians that have performed a medical procedure 
-- that they are certified to perform, but such that the procedure was done at a date 
-- (Undergoes.Date) after the physician's certification expired (Trained_In.CertificationExpires).

-- Here we can just use view4:

SELECT physician_name 
FROM view4
WHERE date > certificationexpires;


-- 8.4 Same as the previous query, but include the following information in the results: 
-- Physician name, name of procedure, date when the procedure was carried out, 
-- name of the patient the procedure was carried out on, and date when the certification expired.

-- Again, can just use view4:

SELECT physician_name, procedure_name, date, patient_name, certificationexpires
FROM view4
WHERE date > certificationexpires;

-- 8.5 Obtain the information for appointments where a patient 
-- met with a physician other than his/her primary care physician. 
-- Show the following information: 
-- Patient name, physician name, nurse name (if any), start and end time of appointment, 
-- examination room, and the name of the patient's primary care physician.

SELECT *
FROM Patient

SELECT *
FROM Nurse

SELECT *
FROM Appointment

CREATE VIEW view5 AS
SELECT p.name AS patient_name, p.pcp AS primary_physician, a.prepnurse, a.physician AS appt_physician, 
a.start1 AS start_time, a.end1 AS end_time, a.examinationroom
FROM Patient as p
JOIN Appointment as a
ON p.ssn = a.patient
WHERE p.pcp != a.physician;

CREATE VIEW view6 AS
SELECT patient_name, primary_physician, prepnurse, appt_physician,
start_Time, end_time, examinationroom, Physician.name AS primary_physician_name, Nurse.name AS nurse_name
FROM view5
LEFT JOIN Physician ON view5.primary_physician = Physician.employeeid
LEFT JOIN Nurse ON view5.prepnurse = Nurse.employeeid;


-- Main query now.
-- Note, two left joins were necessary, because we're joining twice on the same column.
SELECT patient_name, nurse_name, primary_physician_name, Physician.name AS appt_physician_name,
start_Time, end_time, examinationroom
FROM view6
LEFT JOIN Physician
ON view6.appt_physician = Physician.employeeid;


-- 8.6 The Patient field in Undergoes is redundant, since we can obtain it from the Stay table. 
-- There are no constraints in force to prevent inconsistencies between these two tables. 
-- More specifically, the Undergoes table may include a row where the patient ID does not match 
-- the one we would obtain from the Stay table through the Undergoes.
-- Stay foreign key. Select all rows from Undergoes that exhibit this inconsistency.


-- ?????????????????????????????????????????????????????????????????????? --
-- ?????????????????????????????????????????????????????????????????????? --
-- ?????????????????????????????????????????????????????????????????????? --

SELECT *
FROM Undergoes
ORDER BY stay;

SELECT *
FROM Stay;

SELECT *
FROM Undergoes AS u
LEFT JOIN Stay as s
ON u.stay = s.stayid
WHERE u.patient != s.patient


-- alright, so the patient id is the primary key of Undergoes. 
-- and the patient id is the foreign key of Stay




-- 8.7 Obtain the names of all the nurses who have ever been on call for room 123.

SELECT *
FROM On_Call

SELECT *
FROM Room

SELECT *
FROM Nurse

WITH nurse_123 AS(
SELECT *
FROM On_Call AS oc
LEFT JOIN Room AS r
ON oc.blockfloor = r.blockfloor
AND oc.blockcode = r.blockcode
WHERE number = 123)

SELECT Nurse.name 
FROM Nurse
WHERE Nurse.employeeid IN (Select nurse FROM nurse_123);




-- 8.8 The hospital has several examination rooms where appointments take place. 
-- Obtain the number of appointments that have taken place in each examination room.

SELECT examinationroom, COUNT(examinationroom)
FROM Appointment
GROUP BY examinationroom
ORDER BY examinationroom;


-- 8.9 Obtain the names of all patients and their primary care physician, such that the following are true:
    -- a) The patient has been prescribed some medication by his/her primary care physician.
    -- b) The patient has undergone a procedure with a cost larger that $5,000
    -- c) The patient has had at least two appointments where the nurse who prepared 
    --    the appointment was a registered nurse.
    -- d) The patient's primary care physician is not the head of any department.


-- a) The patient has been prescribed some medication by his/her primary care physician.

SELECT *
FROM Prescribes

SELECT *
FROM Patient

SELECT *
FROM Physician

WITH drugs_yes AS (
SELECT pat.name AS patient_name, phys.name AS prescribing_physician, pat.pcp
FROM Prescribes AS pres
LEFT JOIN Patient AS pat 
        ON pres.patient = pat.ssn
LEFT JOIN Physician AS phys 
        ON pres.physician = phys.employeeid)

SELECT DISTINCT patient_name, prescribing_physician, Physician.name AS primary_physician
FROM drugs_yes
LEFT JOIN Physician 
ON drugs_yes.pcp = Physician.employeeid
WHERE prescribing_physician != Physician.name;


-- b) The patient has undergone a procedure with a cost larger that $5,000



SELECT *
FROM Undergoes;

SELECT *
FROM Procedures;

SELECT *
FROM Patient;

SELECT *
FROM Physician;

CREATE VIEW expensive_procedures AS 
SELECT Undergoes.patient AS patient_ssn, Undergoes.procedure AS procedure_code,
Procedures.cost AS procedure_cost, Patient.name AS patient_name
FROM Undergoes
LEFT JOIN Procedures 
    ON Undergoes.procedure = Procedures.code
LEFT JOIN Patient
    ON Undergoes.patient = Patient.ssn
WHERE Procedures.cost > 5000;

SELECT ep.patient_name, phys.name AS pcp_name, ep.procedure_cost
FROM expensive_procedures AS ep
LEFT JOIN Patient AS p
ON ep.patient_ssn = p.ssn
LEFT JOIN Physician AS phys
ON p.pcp = phys.employeeid;


-- c) The patient has had at least two appointments where the nurse who prepared 
    --    the appointment was a registered nurse.

SELECT *
FROM Appointment

SELECT *
FROM Nurse

CREATE VIEW nurse_count AS
SELECT patient, n.employeeid AS nurse_id, n.name AS nurse_name, n.registered
FROM Appointment AS app
LEFT JOIN Nurse AS n
ON app.prepnurse = n.employeeid
ORDER BY patient;

CREATE VIEW temp_table AS 
SELECT patient, COUNT(registered)
FROM nurse_count
GROUP BY patient
HAVING COUNT(registered) >= 2;

SELECT Patient.name AS patient_name, Physician.name AS pcp_name
FROM temp_table
LEFT JOIN Patient
    ON temp_table.patient = Patient.ssn
LEFT JOIN Physician
    ON Patient.pcp = Physician.employeeid


-- d) The patient's primary care physician is not the head of any department.



SELECT *
FROM Department

SELECT *
FROM Patient

SELECT *
FROM Physician


SELECT pat.name AS patient_name, phys.name AS pcp_name
FROM Patient AS pat
LEFT JOIN Physician AS phys
ON pat.pcp = phys.employeeid
WHERE pat.pcp NOT IN (SELECT head FROM Department);















































