/* 

-- Note, I had to create the table using the GUI, because the line itself wouldn't execute. 

--CREATE TABLE PEOPLE (id INTEGER, name CHAR);

INSERT INTO PEOPLE VALUES(1, 'A');
INSERT INTO PEOPLE VALUES(2, 'B');
INSERT INTO PEOPLE VALUES(3, 'C');
INSERT INTO PEOPLE VALUES(4, 'D');

--CREATE TABLE ADDRESS (id INTEGER, address CHAR, updatedate date);

INSERT INTO ADDRESS VALUES(1, 'address-1-1', '2016-01-01');
INSERT INTO ADDRESS VALUES(1, 'address-1-2', '2016-09-02');
INSERT INTO ADDRESS VALUES(2, 'address-2-1', '2015-11-01');
INSERT INTO ADDRESS VALUES(3, 'address-3-1', '2016-12-01');
INSERT INTO ADDRESS VALUES(3, 'address-3-2', '2014-09-11');
INSERT INTO ADDRESS VALUES(3, 'address-3-3', '2015-01-01');
INSERT INTO ADDRESS VALUES(4, 'address-4-1', '2010-05-21');
INSERT INTO ADDRESS VALUES(4, 'address-4-2', '2012-02-11');
INSERT INTO ADDRESS VALUES(4, 'address-4-3', '2015-04-27');
INSERT INTO ADDRESS VALUES(4, 'address-4-4', '2014-01-01');
*/


SELECT *
FROM people

SELECT *
FROM address

-- Questions

-- 10.1 
-- Join table PEOPLE and ADDRESS, but keep only one address information 
-- for each person (we don't mind which record we take for each person). 
-- i.e., the joined table should have the same number of rows as table PEOPLE

SELECT *
FROM people

SELECT *
FROM address


-- Pick the most recently updated address
WITH temp AS (
SELECT id, MAX(updatedate)
FROM address
GROUP BY id
ORDER BY id)

SELECT temp.id, temp.max AS update_Date, address.address
FROM temp
INNER JOIN address
ON temp.id = address.id AND temp.max = address.updatedate
    
    
    
-- 10.2 Join table PEOPLE and ADDRESS, but ONLY keep the LATEST address information for each person. 
    -- i.e., the joined table should have the same number of rows as table PEOPLE

-- Ah. Solved this already above.


























